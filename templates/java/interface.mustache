package {{packageName}};

{{#isUseCasePort}}
import {{application_dto}}.*;

/**
 * Use case interface for {{operationName}} operation.
 * <p>
 * This interface defines the contract for the {{operationName}} use case,
 * serving as an input port in the Clean Architecture. It encapsulates
 * the business logic interface without implementation details.
 * </p>
 * 
 * @author {{author}}
 * @version {{version}}
 */
public interface {{classname}} {
    
    {{#operationName}}
    {{#isUpdateOperation}}
    {{returnType}} execute(String userId, {{requestType}} request);
    {{/isUpdateOperation}}
    {{^isUpdateOperation}}
    {{returnType}} execute({{requestType}} request);
    {{/isUpdateOperation}}
    {{/operationName}}
}
{{/isUseCasePort}}

{{#isDomainPort}}
import {{domain_model}}.{{entityName}};
import java.util.List;
import java.util.Optional;

/**
 * Domain repository port for {{entityName}} operations.
 * <p>
 * This interface defines the contract for {{entityName}} persistence operations,
 * serving as an output port in the Clean Architecture. It abstracts
 * the persistence layer from the domain logic.
 * </p>
 * 
 * @author {{author}}
 * @version {{version}}
 */
public interface {{classname}} {
    
    {{entityName}} save({{entityName}} {{entityVarName}});
    
    Optional<{{entityName}}> findById(String id);
    
    List<{{entityName}}> findAll();
    
    void deleteById(String id);
    
    boolean existsById(String id);
}
{{/isDomainPort}}