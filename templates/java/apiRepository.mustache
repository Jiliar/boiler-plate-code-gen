{{#isJpaRepository}}
package {{packageName}};

import {{infra_entity}}.{{entityName}}Dbo;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;

/**
 * Spring Data JPA Repository for {{entityName}} entities.
 * <p>
 * This interface extends JpaRepository to provide standard CRUD operations
 * and includes custom query methods for specific business requirements.
 * It operates on {{entityName}}Dbo entities for database persistence.
 * </p>
 * 
 * @author {{author}}
 * @version {{version}}
 */
@Repository
public interface {{classname}} extends JpaRepository<{{entityName}}Dbo, String> {
    
    /**
     * Find entities with pagination and search functionality.
     * {{#hasSearchFields}}
     * Searches in: {{#searchFields}}{{.}}{{^-last}}, {{/-last}}{{/searchFields}}
     * {{/hasSearchFields}}
     * {{^hasSearchFields}}
     * Searches by ID when no text fields are available.
     * {{/hasSearchFields}}
     */
    @Query("SELECT e FROM {{entityName}}Dbo e WHERE " +
           "(:search IS NULL OR " +
           "{{searchQuery}})")
    Page<{{entityName}}Dbo> findBySearchTerm(@Param("search") String search, Pageable pageable);
    
    /**
     * Find all entities with pagination.
     */
    @Query("SELECT e FROM {{entityName}}Dbo e")
    Page<{{entityName}}Dbo> findAllPaged(Pageable pageable);
}
{{/isJpaRepository}}

{{#isAdapter}}
package {{packageName}};

import {{domain_ports_output}}.{{portName}};
import {{domain_model}}.{{entityName}};
import {{infra_entity}}.{{entityName}}Dbo;
import {{infra_repository}}.{{jpaRepositoryName}};
import {{application_mapper}}.{{entityName}}Mapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import java.util.List;
import java.util.Optional;

/**
 * Repository adapter implementing the {{entityName}} domain port.
 * <p>
 * This adapter serves as the output adapter in Clean Architecture,
 * implementing the domain repository interface and delegating to
 * Spring Data JPA repository. It handles the conversion between
 * domain objects and database entities using MapStruct.
 * </p>
 * 
 * @author {{author}}
 * @version {{version}}
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class {{classname}} implements {{portName}} {

    private final {{jpaRepositoryName}} jpaRepository;
    private final {{entityName}}Mapper mapper;

    @Override
    public {{entityName}} save({{entityName}} {{entityVarName}}) {
        log.debug("Saving {{entityName}}: {}", {{entityVarName}});
        {{entityName}}Dbo dbo = mapper.toDbo({{entityVarName}});
        {{entityName}}Dbo savedDbo = jpaRepository.save(dbo);
        return mapper.toDomain(savedDbo);
    }

    @Override
    public Optional<{{entityName}}> findById(String id) {
        log.debug("Finding {{entityName}} by id: {}", id);
        return jpaRepository.findById(id)
                .map(mapper::toDomain);
    }

    @Override
    public List<{{entityName}}> findAll() {
        log.debug("Finding all {{entityName}}s");
        return mapper.toDomainList(jpaRepository.findAll());
    }

    @Override
    public void deleteById(String id) {
        log.debug("Deleting {{entityName}} by id: {}", id);
        jpaRepository.deleteById(id);
    }

    @Override
    public boolean existsById(String id) {
        log.debug("Checking if {{entityName}} exists by id: {}", id);
        return jpaRepository.existsById(id);
    }

    // Additional business methods with pagination
    public Page<{{entityName}}> findBySearchTerm(String search, Pageable pageable) {
        log.debug("Searching {{entityName}}s with term: {} and pagination: {}", search, pageable);
        return jpaRepository.findBySearchTerm(search, pageable)
                .map(mapper::toDomain);
    }
    
    public Page<{{entityName}}> findAllPaged(Pageable pageable) {
        log.debug("Finding all {{entityName}}s with pagination: {}", pageable);
        return jpaRepository.findAllPaged(pageable)
                .map(mapper::toDomain);
    }
}
{{/isAdapter}}