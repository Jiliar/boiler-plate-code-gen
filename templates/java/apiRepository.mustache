{{#isJpaRepository}}
package {{packageName}};

import {{infra_entity}}.{{entityName}}Dbo;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;

/**
 * Spring Data JPA Repository for {{entityName}} entities.
 * <p>
 * This interface extends JpaRepository to provide standard CRUD operations
 * and includes custom query methods for specific business requirements.
 * It operates on {{entityName}}Dbo entities for database persistence.
 * </p>
 * 
 * @author {{author}}
 * @version {{version}}
 */
@Repository
public interface {{classname}} extends JpaRepository<{{entityName}}Dbo, String> {
    
    Optional<{{entityName}}Dbo> findByUsername(String username);
    
    Optional<{{entityName}}Dbo> findByEmail(String email);
    
    boolean existsByUsername(String username);
    
    boolean existsByEmail(String email);
    
    @Query("SELECT u FROM {{entityName}}Dbo u WHERE " +
           "(:search IS NULL OR " +
           "LOWER(u.username) LIKE LOWER(CONCAT('%', :search, '%')) OR " +
           "LOWER(u.email) LIKE LOWER(CONCAT('%', :search, '%')) OR " +
           "LOWER(u.firstName) LIKE LOWER(CONCAT('%', :search, '%')) OR " +
           "LOWER(u.lastName) LIKE LOWER(CONCAT('%', :search, '%')))")
    List<{{entityName}}Dbo> findBySearchTerm(@Param("search") String search);
}
{{/isJpaRepository}}

{{#isAdapter}}
package {{packageName}};

import {{domain_ports_output}}.{{portName}};
import {{domain_model}}.{{entityName}};
import {{infra_entity}}.{{entityName}}Dbo;
import {{infra_repository}}.{{jpaRepositoryName}};
import {{application_mapper}}.{{entityName}}Mapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import java.util.List;
import java.util.Optional;

/**
 * Repository adapter implementing the {{entityName}} domain port.
 * <p>
 * This adapter serves as the output adapter in Clean Architecture,
 * implementing the domain repository interface and delegating to
 * Spring Data JPA repository. It handles the conversion between
 * domain objects and database entities using MapStruct.
 * </p>
 * 
 * @author {{author}}
 * @version {{version}}
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class {{classname}} implements {{portName}} {

    private final {{jpaRepositoryName}} jpaRepository;
    private final {{entityName}}Mapper mapper;

    @Override
    public {{entityName}} save({{entityName}} {{entityVarName}}) {
        log.debug("Saving {{entityName}}: {}", {{entityVarName}});
        {{entityName}}Dbo dbo = mapper.toDbo({{entityVarName}});
        {{entityName}}Dbo savedDbo = jpaRepository.save(dbo);
        return mapper.toDomain(savedDbo);
    }

    @Override
    public Optional<{{entityName}}> findById(String id) {
        log.debug("Finding {{entityName}} by id: {}", id);
        return jpaRepository.findById(id)
                .map(mapper::toDomain);
    }

    @Override
    public List<{{entityName}}> findAll() {
        log.debug("Finding all {{entityName}}s");
        return mapper.toDomainList(jpaRepository.findAll());
    }

    @Override
    public void deleteById(String id) {
        log.debug("Deleting {{entityName}} by id: {}", id);
        jpaRepository.deleteById(id);
    }

    @Override
    public boolean existsById(String id) {
        log.debug("Checking if {{entityName}} exists by id: {}", id);
        return jpaRepository.existsById(id);
    }

    // Additional business methods
    public Optional<{{entityName}}> findByUsername(String username) {
        log.debug("Finding {{entityName}} by username: {}", username);
        return jpaRepository.findByUsername(username)
                .map(mapper::toDomain);
    }

    public Optional<{{entityName}}> findByEmail(String email) {
        log.debug("Finding {{entityName}} by email: {}", email);
        return jpaRepository.findByEmail(email)
                .map(mapper::toDomain);
    }

    public boolean existsByUsername(String username) {
        return jpaRepository.existsByUsername(username);
    }

    public boolean existsByEmail(String email) {
        return jpaRepository.existsByEmail(email);
    }

    public List<{{entityName}}> findBySearchTerm(String search) {
        log.debug("Searching {{entityName}}s with term: {}", search);
        return mapper.toDomainList(jpaRepository.findBySearchTerm(search));
    }
}
{{/isAdapter}}