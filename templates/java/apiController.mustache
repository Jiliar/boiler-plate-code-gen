package {{packageName}};

{{#useCaseImports}}
import {{.}};
{{/useCaseImports}}
{{#dtoImports}}
import {{.}};
{{/dtoImports}}
import {{utils}}.LoggingUtils;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestHeader;
import jakarta.validation.Valid;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

/**
 * REST Controller for {{entityName}} operations.
 * <p>
 * This controller serves as the input adapter in the Clean Architecture,
 * handling HTTP requests and delegating business logic to use cases.
 * It follows REST conventions and provides endpoints for CRUD operations.
 * </p>
 * 
 * @author {{author}}
 * @version {{version}}
 */
@RestController
@RequestMapping("/{{entityPath}}")
@RequiredArgsConstructor
@Tag(name = "{{entityName}}", description = "{{entityName}} management operations")
public class {{classname}} {

    private static final LoggingUtils logger = LoggingUtils.getLogger({{classname}}.class);

    private final {{entityName}}UseCase {{entityVarName}}UseCase;

{{#hasCreate}}
    @PostMapping
    @Operation(summary = "Create a new {{entityName}}", description = "Creates a new {{entityName}} with the provided information")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "{{entityName}} created successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid input data"),
        @ApiResponse(responseCode = "409", description = "{{entityName}} already exists")
    })
    public ResponseEntity<Create{{entityName}}ResponseContent> create{{entityName}}(
            @Parameter(description = "{{entityName}} creation request", required = true)
            @Valid @RequestBody Create{{entityName}}RequestContent request,
            @Parameter(description = "Unique request identifier", required = true)
            @RequestHeader("X-Request-ID") String requestId,
            @Parameter(description = "Correlation identifier for transaction tracking")
            @RequestHeader(value = "X-Correlation-ID", required = false) String correlationId,
            @Parameter(description = "Client service identifier")
            @RequestHeader(value = "X-Client-Id", required = false) String clientId) {
        logger.info("Creating {{entityVarName}} with request: {} [RequestID: {}, CorrelationID: {}, ClientID: {}]", request, requestId, correlationId, clientId);
        Create{{entityName}}ResponseContent response = {{entityVarName}}UseCase.create(request);
        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }
{{/hasCreate}}

{{#hasGet}}
    @GetMapping("/{{entityIdPath}}")
    @Operation(summary = "Get {{entityName}} by ID", description = "Retrieves a {{entityName}} by its unique identifier")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "{{entityName}} found"),
        @ApiResponse(responseCode = "404", description = "{{entityName}} not found")
    })
    public ResponseEntity<Get{{entityName}}ResponseContent> get{{entityName}}(
            @Parameter(description = "{{entityName}} unique identifier", required = true)
            @PathVariable String {{entityVarName}}Id,
            @Parameter(description = "Unique request identifier", required = true)
            @RequestHeader("X-Request-ID") String requestId,
            @Parameter(description = "Correlation identifier for transaction tracking")
            @RequestHeader(value = "X-Correlation-ID", required = false) String correlationId,
            @Parameter(description = "Client service identifier")
            @RequestHeader(value = "X-Client-Id", required = false) String clientId) {
        logger.info("Getting {{entityVarName}} with id: {} [RequestID: {}, CorrelationID: {}, ClientID: {}]", {{entityVarName}}Id, requestId, correlationId, clientId);
        Get{{entityName}}ResponseContent response = {{entityVarName}}UseCase.get({{entityVarName}}Id);
        return ResponseEntity.ok(response);
    }
{{/hasGet}}

{{#hasUpdate}}
    @PutMapping("/{{entityIdPath}}")
    @Operation(summary = "Update {{entityName}}", description = "Updates an existing {{entityName}} with new information")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "{{entityName}} updated successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid input data"),
        @ApiResponse(responseCode = "404", description = "{{entityName}} not found")
    })
    public ResponseEntity<Update{{entityName}}ResponseContent> update{{entityName}}(
            @Parameter(description = "{{entityName}} unique identifier", required = true)
            @PathVariable String {{entityVarName}}Id,
            @Parameter(description = "{{entityName}} update request", required = true)
            @Valid @RequestBody Update{{entityName}}RequestContent request,
            @Parameter(description = "Unique request identifier", required = true)
            @RequestHeader("X-Request-ID") String requestId,
            @Parameter(description = "Correlation identifier for transaction tracking")
            @RequestHeader(value = "X-Correlation-ID", required = false) String correlationId,
            @Parameter(description = "Client service identifier")
            @RequestHeader(value = "X-Client-Id", required = false) String clientId) {
        logger.info("Updating {{entityVarName}} {} with request: {} [RequestID: {}, CorrelationID: {}, ClientID: {}]", {{entityVarName}}Id, request, requestId, correlationId, clientId);
        Update{{entityName}}ResponseContent response = {{entityVarName}}UseCase.update({{entityVarName}}Id, request);
        return ResponseEntity.ok(response);
    }
{{/hasUpdate}}

{{#hasDelete}}
    @DeleteMapping("/{{entityIdPath}}")
    @Operation(summary = "Delete {{entityName}}", description = "Deletes a {{entityName}} by its unique identifier")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "{{entityName}} deleted successfully"),
        @ApiResponse(responseCode = "404", description = "{{entityName}} not found")
    })
    public ResponseEntity<Delete{{entityName}}ResponseContent> delete{{entityName}}(
            @Parameter(description = "{{entityName}} unique identifier", required = true)
            @PathVariable String {{entityVarName}}Id,
            @Parameter(description = "Unique request identifier", required = true)
            @RequestHeader("X-Request-ID") String requestId,
            @Parameter(description = "Correlation identifier for transaction tracking")
            @RequestHeader(value = "X-Correlation-ID", required = false) String correlationId,
            @Parameter(description = "Client service identifier")
            @RequestHeader(value = "X-Client-Id", required = false) String clientId) {
        logger.info("Deleting {{entityVarName}} with id: {} [RequestID: {}, CorrelationID: {}, ClientID: {}]", {{entityVarName}}Id, requestId, correlationId, clientId);
        Delete{{entityName}}ResponseContent response = {{entityVarName}}UseCase.delete({{entityVarName}}Id);
        return ResponseEntity.ok(response);
    }
{{/hasDelete}}

{{#hasList}}
    @GetMapping
    @Operation(summary = "List {{entityName}}s", description = "Retrieves a paginated list of {{entityName}}s with optional search")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "{{entityName}}s retrieved successfully")
    })
    public ResponseEntity<List{{entityName}}sResponseContent> list{{entityName}}s(
            @Parameter(description = "Page number (1-based)", example = "1")
            @RequestParam(defaultValue = "1") Integer page,
            @Parameter(description = "Page size", example = "20")
            @RequestParam(defaultValue = "20") Integer size,
            @Parameter(description = "Search term for filtering")
            @RequestParam(required = false) String search,
            @Parameter(description = "Unique request identifier", required = true)
            @RequestHeader("X-Request-ID") String requestId,
            @Parameter(description = "Correlation identifier for transaction tracking")
            @RequestHeader(value = "X-Correlation-ID", required = false) String correlationId,
            @Parameter(description = "Client service identifier")
            @RequestHeader(value = "X-Client-Id", required = false) String clientId) {
        logger.info("Listing {{entityVarName}}s with page: {}, size: {}, search: {} [RequestID: {}, CorrelationID: {}, ClientID: {}]", page, size, search, requestId, correlationId, clientId);
        List{{entityName}}sResponseContent response = {{entityVarName}}UseCase.list(page, size, search);
        return ResponseEntity.ok(response);
    }
{{/hasList}}

{{#hasComplexOperations}}
{{#complexOperations}}
    @GetMapping("/{{pathSegment}}")
    @Operation(summary = "{{operationId}}", description = "Complex operation: {{operationId}}")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Operation completed successfully")
    })
    public ResponseEntity<{{responseType}}> {{methodName}}(
            @Parameter(description = "Unique request identifier", required = true)
            @RequestHeader("X-Request-ID") String requestId,
            @Parameter(description = "Correlation identifier for transaction tracking")
            @RequestHeader(value = "X-Correlation-ID", required = false) String correlationId,
            @Parameter(description = "Client service identifier")
            @RequestHeader(value = "X-Client-Id", required = false) String clientId) {
        logger.info("Executing {{operationId}} [RequestID: {}, CorrelationID: {}, ClientID: {}]", requestId, correlationId, clientId);
        {{responseType}} response = {{entityVarName}}UseCase.{{methodName}}();
        return ResponseEntity.ok(response);
    }

{{/complexOperations}}
{{/hasComplexOperations}}
}