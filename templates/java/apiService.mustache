package {{packageName}};

import {{domain_ports_input}}.{{operationName}}UseCase;
import {{domain_ports_output}}.{{entityName}}RepositoryPort;
import {{application_dto}}.*;
import {{domain_model}}.{{entityName}};
import {{application_mapper}}.{{entityName}}Mapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.math.BigDecimal;

/**
 * Application service implementing {{operationName}} use case.
 * <p>
 * This service contains the business logic for {{operationName}} operation,
 * orchestrating domain objects and repository interactions. It serves as
 * the application layer in Clean Architecture, implementing use case interfaces
 * defined in the domain layer.
 * </p>
 * 
 * @author {{author}}
 * @version {{version}}
 */
@Slf4j
@Service
@RequiredArgsConstructor
@Transactional
public class {{classname}} implements {{operationName}}UseCase {

    private final {{entityName}}RepositoryPort {{entityVarName}}RepositoryPort;
    private final {{entityName}}Mapper {{entityVarName}}Mapper;

    {{#isUpdate}}
    @Override
    public {{returnType}} execute(String userId, {{requestType}} request) {
        log.info("Executing {{operationName}} with userId: {} and request: {}", userId, request);
        
        try {
            {{entityName}} existing{{entityName}} = {{entityVarName}}RepositoryPort.findById(userId)
                .orElseThrow(() -> new {{infra_config}}.NotFoundException("{{entityName}} not found"));
            
            // Update existing entity with request data
            {{entityName}} updated{{entityName}} = {{entityVarName}}Mapper.fromUpdateRequest(request);
            updated{{entityName}}.setUserId(userId);
            updated{{entityName}}.setUsername(existing{{entityName}}.getUsername());
            updated{{entityName}}.setCreatedAt(existing{{entityName}}.getCreatedAt());
            updated{{entityName}}.setStatus(existing{{entityName}}.getStatus());
            
            {{entityName}} saved{{entityName}} = {{entityVarName}}RepositoryPort.save(updated{{entityName}});
            
            return {{entityVarName}}Mapper.toUpdateResponse(saved{{entityName}});
        } catch ({{infra_config}}.NotFoundException e) {
            log.error("{{entityName}} not found in {{operationName}}: {}", e.getMessage());
            throw e;
        } catch (Exception e) {
            log.error("Error in {{operationName}}: {}", e.getMessage(), e);
            throw e;
        }
    }
    {{/isUpdate}}
    {{^isUpdate}}
    @Override
    public {{returnType}} execute({{requestType}} request) {
        log.info("Executing {{operationName}} with request: {}", request);
        
        try {
            {{#isCreate}}
            // Convert request to domain model using mapper
            {{entityName}} {{entityVarName}} = {{entityVarName}}Mapper.fromCreateRequest(request);
            
            {{entityName}} saved{{entityName}} = {{entityVarName}}RepositoryPort.save({{entityVarName}});
            
            return {{entityVarName}}Mapper.toCreateResponse(saved{{entityName}});
            {{/isCreate}}
            {{#isGet}}
            {{entityName}} {{entityVarName}} = {{entityVarName}}RepositoryPort.findById(request)
                .orElseThrow(() -> new {{infra_config}}.NotFoundException("{{entityName}} not found"));
            
            return {{entityVarName}}Mapper.toGetResponse({{entityVarName}});
            {{/isGet}}
            {{#isDelete}}
            // Verify user exists before deletion
            {{entityName}} {{entityVarName}} = {{entityVarName}}RepositoryPort.findById(request)
                .orElseThrow(() -> new {{infra_config}}.NotFoundException("{{entityName}} not found"));
            
            {{entityVarName}}RepositoryPort.deleteById(request);
            
            return {{returnType}}.builder()
                .deleted(true)
                .message("{{entityName}} deleted successfully")
                .build();
            {{/isDelete}}
            {{^isCreate}}{{^isGet}}{{^isDelete}}
            // List operation
            List<{{entityName}}> {{entityVarName}}s = {{entityVarName}}RepositoryPort.findAll();
            
            // Build the list response manually
            List<{{entityName}}Response> responseList = {{entityVarName}}Mapper.toResponseList({{entityVarName}}s);
            
            return {{returnType}}.builder()
                .users(responseList)
                .page(BigDecimal.valueOf(1))
                .size(BigDecimal.valueOf({{entityVarName}}s.size()))
                .total(BigDecimal.valueOf({{entityVarName}}s.size()))
                .totalPages(BigDecimal.valueOf(1))
                .build();
            {{/isDelete}}{{/isGet}}{{/isCreate}}
        } catch ({{infra_config}}.NotFoundException e) {
            log.error("{{entityName}} not found in {{operationName}}: {}", e.getMessage());
            throw e;
        } catch (Exception e) {
            log.error("Error in {{operationName}}: {}", e.getMessage(), e);
            throw e;
        }
    }
    {{/isUpdate}}
}