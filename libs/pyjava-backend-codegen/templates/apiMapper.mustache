package {{packageName}};

import {{domain_model}}.{{entityName}};
import {{infra_entity}}.{{entityName}}Dbo;
{{#dtoImports}}
import {{.}};
{{/dtoImports}}
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.IterableMapping;
import org.mapstruct.NullValuePropertyMappingStrategy;
import org.mapstruct.factory.Mappers;
import java.util.List;
import java.math.BigDecimal;

/**
 * MapStruct mapper for {{entityName}} transformations between layers.
 * <p>
 * This mapper handles conversions between:
 * - Domain models (pure business objects)
 * - DTOs (data transfer objects for API communication)
 * - DBOs (database objects for persistence)
 * </p>
 * 
 * @author {{author}}
 * @version {{version}}
 */
@Mapper(componentModel = "spring", nullValuePropertyMappingStrategy = org.mapstruct.NullValuePropertyMappingStrategy.IGNORE)
public interface {{classname}} {

    {{classname}} INSTANCE = Mappers.getMapper({{classname}}.class);

    // Domain to DBO mappings
    @Mapping(source = "{{entityVarName}}Id", target = "id")
    @org.mapstruct.Named("domainToDbo")
    {{entityName}}Dbo toDbo({{entityName}} domain);
    
    @Mapping(source = "id", target = "{{entityVarName}}Id")
    @org.mapstruct.Named("dboToDomain")
    {{entityName}} toDomain({{entityName}}Dbo dbo);
    
    @IterableMapping(qualifiedByName = "dboToDomain")
    List<{{entityName}}> toDomainList(List<{{entityName}}Dbo> dbos);
    
    @IterableMapping(qualifiedByName = "domainToDbo")
    List<{{entityName}}Dbo> toDboList(List<{{entityName}}> domains);

    // DTO to Domain mappings for Create/Update operations
{{#hasCreateDto}}
    @Mapping(target = "{{entityVarName}}Id", expression = "java(java.util.UUID.randomUUID().toString())")
    @Mapping(target = "status", constant = "ACTIVE")
    @Mapping(target = "createdAt", expression = "java(java.time.Instant.now().toString())")
    @Mapping(target = "updatedAt", ignore = true)
    {{entityName}} fromCreateRequest({{createDtoName}} request);
{{/hasCreateDto}}
    
{{#hasUpdateDto}}
    @Mapping(target = "{{entityVarName}}Id", ignore = true)
    @Mapping(target = "status", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    {{entityName}} fromUpdateRequest({{updateDtoName}} request);
    
    @Mapping(target = "{{entityVarName}}Id", ignore = true)
    @Mapping(target = "status", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    void updateEntityFromRequest({{updateDtoName}} request, @org.mapstruct.MappingTarget {{entityName}} entity);
{{/hasUpdateDto}}

    // Basic mapping methods - MapStruct will handle field mapping automatically
{{#hasResponseDto}}
    @org.mapstruct.Named("domainToDto")
    {{responseDtoName}} toDto({{entityName}} domain);
    
    @IterableMapping(qualifiedByName = "domainToDto")
    List<{{responseDtoName}}> toDtoList(List<{{entityName}}> domains);
{{/hasResponseDto}}

    // Specific response mapping methods
{{#hasCreateDto}}
    Create{{entityName}}ResponseContent toCreateResponse({{entityName}} domain);
{{/hasCreateDto}}
{{#hasGetDto}}
    Get{{entityName}}ResponseContent toGetResponse({{entityName}} domain);
{{/hasGetDto}}
{{#hasUpdateDto}}
    Update{{entityName}}ResponseContent toUpdateResponse({{entityName}} domain);
{{/hasUpdateDto}}
    
{{#hasListResponseDto}}
    // Pagination support for list responses
    default {{listResponseDtoName}} toListResponse(List<{{entityName}}> domains, int page, int size) {
        if (domains == null) return null;
        
        int total = domains.size();
        int totalPages = (int) Math.ceil((double) total / size);
        
        return {{listResponseDtoName}}.builder()
            .{{entityVarName}}s(toDtoList(domains))
            .page(java.math.BigDecimal.valueOf(page))
            .size(java.math.BigDecimal.valueOf(size))
            .total(java.math.BigDecimal.valueOf(total))
            .totalPages(java.math.BigDecimal.valueOf(totalPages))
            .build();
    }
    
    // Overloaded method with default pagination
    default {{listResponseDtoName}} toListResponse(List<{{entityName}}> domains) {
        return toListResponse(domains, 1, domains != null ? domains.size() : 0);
    }
{{/hasListResponseDto}}
}