@startuml Complex Operations
!theme plain
title Complex Operations - Hexagonal Architecture Flow (v2)

actor Client
participant "LocationController\n(Input Adapter)" as Controller
participant "LocationService\n(Consolidated Application Service)" as Service
participant "LocationMapper\n(Application Layer)" as Mapper
participant "CityRepositoryAdapter\n(Output Adapter)" as CityRepoAdapter
participant "RegionRepositoryAdapter\n(Output Adapter)" as RegionRepoAdapter
participant "JpaCityRepository\n(Infrastructure)" as JpaCityRepo
participant "JpaRegionRepository\n(Infrastructure)" as JpaRegionRepo
database "H2 Database" as DB

Client -> Controller: GET /locations/regions/{regionId}/cities
activate Controller
note right: Complex operation beyond basic CRUD

Controller -> Service: getCitiesByRegion(regionId)
activate Service
note right: Consolidated service handling\nboth CRUD and complex operations

' Validate region exists
Service -> RegionRepoAdapter: findById(regionId)
activate RegionRepoAdapter
RegionRepoAdapter -> JpaRegionRepo: findById(regionId)
activate JpaRegionRepo
JpaRegionRepo -> DB: SELECT * FROM regions WHERE id = ?
DB --> JpaRegionRepo: Optional<RegionDbo>
JpaRegionRepo --> RegionRepoAdapter: Optional<RegionDbo>
deactivate JpaRegionRepo

alt Region Found
    RegionRepoAdapter -> Mapper: toDomain(RegionDbo)
    activate Mapper
    Mapper --> RegionRepoAdapter: Region
    deactivate Mapper
    RegionRepoAdapter --> Service: Optional<Region>
    deactivate RegionRepoAdapter
    
    ' Get cities for the region
    Service -> CityRepoAdapter: findByRegionId(regionId)
    activate CityRepoAdapter
    note right: Custom query method\ngenerated in repository
    
    CityRepoAdapter -> JpaCityRepo: findByRegionId(regionId)
    activate JpaCityRepo
    JpaCityRepo -> DB: SELECT * FROM cities WHERE region_id = ?
    DB --> JpaCityRepo: List<CityDbo>
    JpaCityRepo --> CityRepoAdapter: List<CityDbo>
    deactivate JpaCityRepo
    
    CityRepoAdapter -> Mapper: toDomainList(List<CityDbo>)
    activate Mapper
    loop for each CityDbo
        Mapper -> Mapper: toDomain(CityDbo)
    end
    Mapper --> CityRepoAdapter: List<City>
    deactivate Mapper
    
    CityRepoAdapter --> Service: List<City>
    deactivate CityRepoAdapter
    
    ' Map to response
    Service -> Mapper: toCitiesByRegionResponse(List<City>, regionId)
    activate Mapper
    note right: Maps cities to response format\nwith region context
    loop for each City
        Mapper -> Mapper: toCityInfo(City)
    end
    note over Mapper: Build GetCitiesByRegionResponseContent:\n- cities: List<CityInfo>\n- regionId: regionId\n- total: cities.size()
    Mapper --> Service: GetCitiesByRegionResponseContent
    deactivate Mapper
    
    Service --> Controller: GetCitiesByRegionResponseContent
    deactivate Service
    
    Controller --> Client: HTTP 200\n{"cities": [...], "regionId": "...", "total": 5}
    deactivate Controller

else Region Not Found
    RegionRepoAdapter --> Service: Optional.empty()
    deactivate RegionRepoAdapter
    
    Service --> Controller: NotFoundException("Region not found")
    deactivate Service
    
    Controller --> Client: HTTP 404\n{"message": "Region not found", "timestamp": "...", "path": "/locations/regions/{regionId}/cities"}
    deactivate Controller
    note right: GlobalExceptionHandler\nhandles the exception
end

note over Service
  Complex Operation Features:
  - Validates related entities
  - Performs multiple repository calls
  - Handles business logic
  - Maintains transaction boundaries
  - Provides detailed error handling
end note

note over Controller
  Controller Features:
  - Handles complex endpoints
  - Maintains REST conventions
  - Provides proper HTTP status codes
  - Includes comprehensive documentation
  - Supports request tracing headers
end note

@enduml