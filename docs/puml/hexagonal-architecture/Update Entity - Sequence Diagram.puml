@startuml UpdateEntity
!theme plain
title Update Entity - Hexagonal Architecture Flow (v2 - Consolidated)

actor Client
participant "EntityController\n(Input Adapter)" as Controller
participant "EntityService\n(Consolidated Application Service)" as Service
participant "EntityMapper\n(Application Layer)" as Mapper
participant "EntityRepositoryAdapter\n(Output Adapter)" as RepoAdapter
participant "JpaEntityRepository\n(Infrastructure)" as JpaRepo
database "Database" as DB

Client -> Controller: PUT /entities/{entityId}\n{updatable fields}
activate Controller

Controller -> Service: update(entityId, UpdateEntityRequestContent)
activate Service
note right: Consolidated service implementing\nEntityUseCase (all CRUD operations)

Service -> RepoAdapter: findById(entityId)
activate RepoAdapter
RepoAdapter -> JpaRepo: findById(entityId)
activate JpaRepo
JpaRepo -> DB: SELECT * FROM entities WHERE id = ?
DB --> JpaRepo: Optional<EntityDbo>
JpaRepo --> RepoAdapter: Optional<EntityDbo>
deactivate JpaRepo

RepoAdapter -> Mapper: toDomain(EntityDbo)
activate Mapper
Mapper --> RepoAdapter: Entity (existing)
deactivate Mapper
RepoAdapter --> Service: Optional<Entity>
deactivate RepoAdapter

Service -> Mapper: updateEntityFromRequest(request, existingEntity)
activate Mapper
note right: Updates only provided fields\nPreserves immutable fields\n(entityId, createdAt, status)
Mapper --> Service: void (existingEntity updated)
deactivate Mapper

note over Service: Set updatedAt timestamp:\nexistingEntity.setUpdatedAt(Instant.now().toString())

Service -> RepoAdapter: save(Entity)
activate RepoAdapter

RepoAdapter -> Mapper: toDbo(Entity)
activate Mapper
Mapper --> RepoAdapter: EntityDbo
deactivate Mapper

RepoAdapter -> JpaRepo: save(EntityDbo)
activate JpaRepo
JpaRepo -> DB: UPDATE entities SET ...fields, updatedAt=? WHERE id=?
DB --> JpaRepo: EntityDbo (updated)
JpaRepo --> RepoAdapter: EntityDbo
deactivate JpaRepo

RepoAdapter -> Mapper: toDomain(EntityDbo)
activate Mapper
Mapper --> RepoAdapter: Entity
deactivate Mapper
RepoAdapter --> Service: Entity (saved)
deactivate RepoAdapter

Service -> Mapper: toUpdateResponse(Entity)
activate Mapper
Mapper --> Service: UpdateEntityResponseContent
deactivate Mapper

Service --> Controller: UpdateEntityResponseContent
deactivate Service

Controller --> Client: HTTP 200\n{updated entity data}
deactivate Controller

@enduml
