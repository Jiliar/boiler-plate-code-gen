@startuml ListUsers
!theme plain
title List Users - Clean Architecture Flow

actor Client
participant "UserController\n(Input Adapter)" as Controller
participant "ListUsersService\n(Application Layer)" as Service
participant "UserMapper\n(Application Layer)" as Mapper
participant "UserRepositoryAdapter\n(Output Adapter)" as RepoAdapter
participant "JpaUserRepository\n(Infrastructure)" as JpaRepo
database "H2 Database" as DB

Client -> Controller: GET /users?page=1&size=20&search=term
activate Controller

Controller -> Service: execute(searchCriteria)
activate Service

Service -> RepoAdapter: findAll()
activate RepoAdapter
note right: In production: implement\npagination and filtering

RepoAdapter -> JpaRepo: findAll()
activate JpaRepo
JpaRepo -> DB: SELECT * FROM users
DB --> JpaRepo: List<UserDbo>
JpaRepo --> RepoAdapter: List<UserDbo>
deactivate JpaRepo

RepoAdapter -> Mapper: toDomainList(List<UserDbo>)
activate Mapper
loop for each UserDbo
    Mapper -> Mapper: toDomain(UserDbo)
end
Mapper --> RepoAdapter: List<User>
deactivate Mapper

RepoAdapter --> Service: List<User>
deactivate RepoAdapter

Service -> Mapper: toResponseList(List<User>)
activate Mapper
loop for each User
    Mapper -> Mapper: toResponse(User)
end
Mapper --> Service: List<UserResponse>
deactivate Mapper

note over Service: Build ListUsersResponseContent:\n- users: List<UserResponse>\n- page: 1\n- size: users.size()\n- total: BigDecimal.valueOf(users.size())\n- totalPages: 1

Service --> Controller: ListUsersResponseContent
deactivate Service

Controller --> Client: HTTP 200\n{users: [...], pagination: {...}}
deactivate Controller

@enduml
