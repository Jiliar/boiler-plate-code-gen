@startuml CreateEntity
!theme plain
title Create Entity - Hexagonal Architecture Flow (v2 - Consolidated)

actor Client
participant "EntityController\n(Input Adapter)" as Controller
participant "EntityService\n(Consolidated Application Service)" as Service
participant "EntityMapper\n(Application Layer)" as Mapper
participant "EntityRepositoryAdapter\n(Output Adapter)" as RepoAdapter
participant "JpaEntityRepository\n(Infrastructure)" as JpaRepo
database "Database" as DB

Client -> Controller: POST /entities\n{entity data}
activate Controller

Controller -> Service: create(CreateEntityRequestContent)
activate Service
note right: Consolidated service implementing\nEntityUseCase (all CRUD operations)

Service -> Mapper: fromCreateRequest(request)
activate Mapper
note right: Maps DTO to Domain\nGenerates UUID, timestamps\nSets status = "ACTIVE"\nHandles validation
Mapper --> Service: Entity (domain model)
deactivate Mapper

Service -> RepoAdapter: save(Entity)
activate RepoAdapter
note right: Implements EntityRepositoryPort\n(Domain Port)

RepoAdapter -> Mapper: toDbo(Entity)
activate Mapper
note right: Maps Domain to DBO\nConverts String timestamps\nto LocalDateTime
Mapper --> RepoAdapter: EntityDbo
deactivate Mapper

RepoAdapter -> JpaRepo: save(EntityDbo)
activate JpaRepo
JpaRepo -> DB: INSERT INTO entities...
DB --> JpaRepo: EntityDbo (with generated data)
JpaRepo --> RepoAdapter: EntityDbo
deactivate JpaRepo

RepoAdapter -> Mapper: toDomain(EntityDbo)
activate Mapper
Mapper --> RepoAdapter: Entity
deactivate Mapper

RepoAdapter --> Service: Entity (saved)
deactivate RepoAdapter

Service -> Mapper: toCreateResponse(Entity)
activate Mapper
note right: Maps Domain to Response DTO\nISO 8601 timestamps\nIncludes all entity fields
Mapper --> Service: CreateEntityResponseContent
deactivate Mapper

Service --> Controller: CreateEntityResponseContent
deactivate Service

Controller --> Client: HTTP 201\n{entityId, ...fields, status, createdAt, updatedAt}
deactivate Controller

@enduml
