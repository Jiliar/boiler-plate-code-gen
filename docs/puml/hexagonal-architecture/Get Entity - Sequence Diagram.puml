@startuml GetEntity
!theme plain
title Get Entity - Hexagonal Architecture Flow (v2 - Consolidated)

actor Client
participant "EntityController\n(Input Adapter)" as Controller
participant "EntityService\n(Consolidated Application Service)" as Service
participant "EntityMapper\n(Application Layer)" as Mapper
participant "EntityRepositoryAdapter\n(Output Adapter)" as RepoAdapter
participant "JpaEntityRepository\n(Infrastructure)" as JpaRepo
database "Database" as DB

Client -> Controller: GET /entities/{entityId}
activate Controller

Controller -> Service: get(entityId)
activate Service
note right: Consolidated service implementing\nEntityUseCase (all CRUD operations)

Service -> RepoAdapter: findById(entityId)
activate RepoAdapter

RepoAdapter -> JpaRepo: findById(entityId)
activate JpaRepo
JpaRepo -> DB: SELECT * FROM entities WHERE id = ?
DB --> JpaRepo: Optional<EntityDbo>
JpaRepo --> RepoAdapter: Optional<EntityDbo>
deactivate JpaRepo

alt Entity Found
    RepoAdapter -> Mapper: toDomain(EntityDbo)
    activate Mapper
    Mapper --> RepoAdapter: Entity
    deactivate Mapper
    
    RepoAdapter --> Service: Optional<Entity>
    deactivate RepoAdapter
    
    Service -> Mapper: toGetResponse(Entity)
    activate Mapper
    Mapper --> Service: GetEntityResponseContent
    deactivate Mapper
    
    Service --> Controller: GetEntityResponseContent
    deactivate Service
    
    Controller --> Client: HTTP 200\n{entity data}
    deactivate Controller

else Entity Not Found
    RepoAdapter --> Service: Optional.empty()
    deactivate RepoAdapter
    
    Service --> Controller: NotFoundException
    deactivate Service
    
    Controller --> Client: HTTP 404\n{"message": "Entity not found",\n "timestamp": "...",\n "path": "/entities/{entityId}"}
    deactivate Controller
    note right: GlobalExceptionHandler\nhandles the exception
end

@enduml
