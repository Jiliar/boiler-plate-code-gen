@startuml CreateUser
!theme plain
title Create User - Clean Architecture Flow

actor Client
participant "UserController\n(Input Adapter)" as Controller
participant "CreateUserService\n(Application Layer)" as Service
participant "UserMapper\n(Application Layer)" as Mapper
participant "UserRepositoryAdapter\n(Output Adapter)" as RepoAdapter
participant "JpaUserRepository\n(Infrastructure)" as JpaRepo
database "H2 Database" as DB

Client -> Controller: POST /users\n{username, email, firstName, lastName, password}
activate Controller

Controller -> Service: execute(CreateUserRequestContent)
activate Service
note right: Implements CreateUserUseCase\n(Domain Port)

Service -> Mapper: fromCreateRequest(request)
activate Mapper
note right: Maps DTO to Domain\nGenerates UUID, timestamps\nSets status = "ACTIVE"
Mapper --> Service: User (domain model)
deactivate Mapper

Service -> RepoAdapter: save(User)
activate RepoAdapter
note right: Implements UserRepositoryPort\n(Domain Port)

RepoAdapter -> Mapper: toDbo(User)
activate Mapper
note right: Maps Domain to DBO\nConverts String timestamps\nto LocalDateTime
Mapper --> RepoAdapter: UserDbo
deactivate Mapper

RepoAdapter -> JpaRepo: save(UserDbo)
activate JpaRepo
JpaRepo -> DB: INSERT INTO users...
DB --> JpaRepo: UserDbo (with generated data)
JpaRepo --> RepoAdapter: UserDbo
deactivate JpaRepo

RepoAdapter -> Mapper: toDomain(UserDbo)
activate Mapper
Mapper --> RepoAdapter: User
deactivate Mapper

RepoAdapter --> Service: User (saved)
deactivate RepoAdapter

Service -> Mapper: toCreateResponse(User)
activate Mapper
note right: Maps Domain to Response DTO\nISO 8601 timestamps
Mapper --> Service: CreateUserResponseContent
deactivate Mapper

Service --> Controller: CreateUserResponseContent
deactivate Service

Controller --> Client: HTTP 201\n{userId, username, email, firstName, lastName, status, createdAt, updatedAt}
deactivate Controller

@enduml
